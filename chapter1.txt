1. Given the un-reduced big-O value, calculate the reduced value.
    a. 10   =>  O(1)
    b. 10n  =>  O(n)
    c. 5 n^2 + 2n  =>  O(n**2)
    d. 3 log2(n) + 2  =>  O(log(n))

2. For each of the following algorithms, calculate the big-O value. Be sure to specify which value n refers to.
    a. T(1 + (n + 1)) => O(n)
      reversed = ''  # O(1)
      for c in str:  # O(n)
        reversed = c + reversed  # O(1)
    b. T((n + 1) * ((n + 2) + 1)) = O(n**2)
    for row_idx in matrix.length:  #O(n)
      row = matrix[row_idx]  #O(1)
      for col_idx in row:  #O(n)
        print row[col_idx]  #O(1)
        print " "  #O(1)
      print "\n"  # O(1)
    c. T(1 + (n + 2) * (10 + 1)) = O(n)
    note: assume each string has at most 10 characters.
    reversed_strings = []  #O(1)
    for str in strings:  #O(n)
      reversed = ''  #O(1)
      for c in str:  #O(10)
        reversed = c + reversed  #O(1)
      reversed_strings.append(reversed)  #O(1)

3. Suppose you have an array of Customer objects, sorted in alphabetical order by last name. For each of the following tasks, determine the run time in terms of big-O.
customers = ["Lin Jeff", "Morrison William", "Carino Richard", "Raines Richard","Sternberg Steven"]

    a. Print the names of all of the customers.  T(n + 1) =  O(n)
    for customer in customers:  #O(n)
      print(customer)  #O(1)
    b. Print the names of only the customers with last name starting with “A”.  T(n + 2) = O(n)
    for customer in customers:  #O(n)
      if customer[0] == "A":  #O(1)
      print (customer)  # O(1)
    c. Find all customers with last name beginning with “A”.  T (1 + (n + 2)) = O(n)
    output = []  #O(1)
    for customer in customers:  #O(n)
      if customer[0] == "A":  #O(1)
        output.append(customer)  #O(1)
    d. Find all customers with first name beginning with “A”.  T( 1 + (n + 3)) = O(n)
    output = []  # O(1)
    for customer in customers:  # O(n)
      firstname = customer.split(" ")[1]  # O(1)
      if firstname[0] == "A":  # O(1)
        output.append(customer)  # O(1)
  

4. Now suppose that you have a dictionary (or hash map) of customer objects, where the keys are letters and the values are arrays storing all customers with last name beginning with that letter. For example, if our dictionary is customers then customers["A"] is an array of all customers with last name ending with “A”. Within each array, the customer objects are not sorted in any way.
NOTE:!! we are going to assume there is only 26 letters in our alphabet
customers = { "A" : ["Adams John", "Andersen Bob"] }

    a. Print the names of all of the customers.  T(26 + (n + 1)) = O(26n) = O(n)
    for (key, value) in customers:  #O(26)
      for customer in customers[key]:  #O(n)
        print (customer)  #O(1)
    b. Print the names of only the customers with last name starting with “A”.  T(n+1) = O(n)
    for customer in customers["A"]:  #O(n)
      print(customer)   #O(1)
    c. Find all customers with last name beginning with “A”.  T(1 + (n + 1)) = O(n)
    output = []  #O(1)
    for customer in customers["A"]:  #O(n)
      output.append(customer)  #O(1)
    d. Find all customers with first name beginning with “A”.  T (1 + 26 (n + 3)) = O(26n) = O(n)
    output = []   #O(1)
    for (key, value) in customers:  #O(26)
      for customer in customers[key]:  #O(n)
        firstname = customer.split(" ")[1]  #O(1)
        if firstname[0] == "A":   #O(1)
        output.append(customer)  #O(1)